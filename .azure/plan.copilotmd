# Azure Deployment Plan for Restaurant Intelligence Platform Project

## **Goal**
Deploy the Restaurant Intelligence Platform to Azure App Service using Azure Developer CLI (azd), providing a scalable, production-ready web application with Stripe payment integration, AI capabilities, and Viking-themed UI.

## **Project Information**

**AppName**: restaurant-intelligence-platform
- **Technology Stack**: Node.js 18+ with Express.js framework
- **Application Type**: Full-stack Restaurant Intelligence Platform with AI integration
- **Key Features**: 
  - Stripe subscription system (Enterprise tiers: $45 Starter, $99 Pro, $299 Platinum)
  - AI Oracle integration with Python backend
  - Viking-themed responsive UI
  - P&L analysis and reporting
  - Excel spreadsheet generation
  - Multiple dashboard variants (performance optimized)
- **Dependencies**: Azure Cosmos DB for data storage, Application Insights for monitoring
- **Hosting Recommendation**: Azure App Service for reliable, scalable web hosting with integrated CI/CD

## **Azure Resources Architecture**

> **Install the mermaid extension in IDE to view the architecture.**

```mermaid
graph TB
    User[üë§ Restaurant Users] --> AppService[üåê Azure App Service<br/>Restaurant Intelligence Platform]
    
    AppService --> CosmosDB[(üóÑÔ∏è Azure Cosmos DB<br/>Restaurant Data)]
    AppService --> KeyVault[üîê Azure Key Vault<br/>Stripe Keys & Secrets]
    AppService --> AppInsights[üìä Application Insights<br/>Performance Monitoring]
    
    Stripe[üí≥ Stripe API] --> AppService
    AppService --> LogAnalytics[üìà Log Analytics Workspace<br/>Centralized Logging]
    
    AppInsights --> LogAnalytics
    
    subgraph "Resource Group: rg-restaurant-intelligence"
        AppService
        CosmosDB
        KeyVault
        AppInsights
        LogAnalytics
    end
```

**Data Flow:**
- Restaurant users access the web application through Azure App Service
- App Service securely retrieves API keys and connection strings from Key Vault
- Application data (restaurants, P&L, inventory) is stored in Cosmos DB
- Payment processing is handled through Stripe API integration
- Performance metrics and application logs flow to Application Insights and Log Analytics

## **Recommended Azure Resources**

### Main Application
- **Application**: Restaurant Intelligence Platform
  - **Hosting Service Type**: Azure App Service (Linux)
  - **SKU**: B2 Basic (2 vCPU, 3.5GB RAM) - Optimal for production workload with room for growth
  - **Configuration**:
    - **Language**: Node.js 18 LTS
    - **Runtime Stack**: Node.js 18 LTS on Linux
    - **Environment Variables**: 
      - `COSMOS_DB_ENDPOINT`
      - `STRIPE_PUBLISHABLE_KEY` 
      - `STRIPE_SECRET_KEY`
      - `STRIPE_WEBHOOK_SECRET`
      - `NODE_ENV=production`
      - `PORT=8080`

### Dependencies
- **Azure Cosmos DB**
  - **SKU**: Serverless (Pay-per-request) - Cost-effective for variable workloads
  - **Service Type**: Azure Cosmos DB SQL API
  - **Connection Type**: Managed Identity + Connection String (fallback)
  - **Environment Variables**: `COSMOS_DB_ENDPOINT`, `COSMOS_DB_KEY`

### Supporting Services
- **Application Insights**: Enables comprehensive application performance monitoring and diagnostics
- **Log Analytics Workspace**: Centralized logging for all App Service logs and Application Insights telemetry
- **Key Vault**: Secure storage for Stripe API keys, Cosmos DB connection strings, and other sensitive configuration

### Security Configurations
- **Managed Identity**: System-assigned managed identity for App Service to access Key Vault and Cosmos DB
- **Key Vault Access Policy**: Managed Identity granted `Get` and `List` permissions for secrets
- **Cosmos DB RBAC**: Managed Identity assigned `DocumentDB Account Contributor` role for data access
- **HTTPS Only**: App Service configured to redirect all HTTP traffic to HTTPS
- **TLS 1.2 Minimum**: Enforce modern encryption standards

## **Execution Steps**

> **Below are the steps for deployment - execute this plan to deploy your Restaurant Intelligence Platform:**

### 1. Provision Azure Infrastructure And Deploy the Application:
   1. Based on the required Azure resources in this plan, get the IaC rules using the `iac-rules-get` tool
   2. Generate Bicep Infrastructure-as-Code files for the required Azure resources
   3. **Pre-check**: Use `get_errors` tool to validate Bicep syntax and fix any errors
   4. Run `azd up` command to provision resources and deploy the application
   5. Verify deployment output to ensure all resources are created successfully
   6. Check application logs using `azd-app-log-get` tool to confirm services are running properly

### 2. Post-Deployment Configuration:
   1. Configure Stripe webhook endpoints in Stripe dashboard to point to deployed App Service
   2. Test subscription flow end-to-end in production environment
   3. Verify AI Oracle integration is working correctly
   4. Validate all dashboard variants load properly with production data

### 3. Summary and Documentation:
   1. Summarize deployment results and save to `.azure/summary.copilotmd`
   2. Document all provisioned resources with their configurations
   3. Create a deployment diagram showing the complete Azure architecture
   4. Provide production URLs and monitoring dashboard links

---

**Next Steps to Execute:**
1. Run the Infrastructure-as-Code generation
2. Deploy to Azure using Azure Developer CLI
3. Configure production environment variables
4. Test the complete application flow
5. Set up monitoring and alerts

This plan will create a production-ready, scalable Restaurant Intelligence Platform on Azure with enterprise-grade security and monitoring capabilities.