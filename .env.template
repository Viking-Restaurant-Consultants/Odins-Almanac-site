# =============================================================================
# Odin's Eye - Environment Variables Template
# =============================================================================
# Business: Viking Restaurant Consultants LLC
# Application: Odin's Eye (P&L Converter)
# 
# Instructions:
# 1. Copy this file to .env (or set as system environment variables)
# 2. Fill in all required values
# 3. Never commit .env file to version control
# 4. Keep credentials secure and rotate them regularly
# =============================================================================

# -----------------------------------------------------------------------------
# Azure Configuration
# -----------------------------------------------------------------------------

# Azure Subscription ID
# Where to find: Azure Portal → Subscriptions → Overview
# Format: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
AZURE_SUBSCRIPTION_ID=5e0e2c8e-e8b7-4cb0-8e5e-c8e7e8b7e8b7

# Azure Region for deployment
# Common values: eastus, westus2, centralus, westeurope, etc.
AZURE_REGION=eastus

# Azure Resource Group name
# This will contain all your Azure resources
AZURE_RESOURCE_GROUP=viking-restaurant-rg

# Azure App Service Plan name
AZURE_APP_SERVICE_PLAN=viking-app-service-plan

# Azure App Service (Web App) name
# Must be globally unique across Azure
# The deployment script will try these names in order:
# 1. odins-almanac (if exists, reuse)
# 2. odins-valhalla (if odins-almanac doesn't exist)
AZURE_APP_NAME=odins-valhalla

# -----------------------------------------------------------------------------
# Stripe Configuration (Required)
# -----------------------------------------------------------------------------

# Stripe Publishable Key (starts with pk_)
# Where to find: Stripe Dashboard → Developers → API Keys
# Test key example: pk_test_51A...
# Live key example: pk_live_51A...
STRIPE_PUBLISHABLE_KEY=pk_test_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# Stripe Secret Key (starts with sk_)
# Where to find: Stripe Dashboard → Developers → API Keys
# ⚠️ IMPORTANT: Keep this secret! Never share or commit to version control
# Test key example: sk_test_51A...
# Live key example: sk_live_51A...
STRIPE_SECRET_KEY=sk_test_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# -----------------------------------------------------------------------------
# Database Configuration (Required)
# -----------------------------------------------------------------------------

# PostgreSQL Database Connection String
# Format: postgresql://username:password@host:port/database?sslmode=require
#
# Examples:
# - Neon: postgresql://user:pass@ep-cool-darkness-123456.us-east-2.aws.neon.tech/neondb?sslmode=require
# - Azure: postgresql://adminuser@servername:password@servername.postgres.database.azure.com:5432/dbname?sslmode=require
# - Heroku: postgres://user:pass@ec2-xx-xxx-xxx-xxx.compute-1.amazonaws.com:5432/dbname
# - Supabase: postgresql://postgres:[YOUR-PASSWORD]@db.project-ref.supabase.co:5432/postgres
#
# ⚠️ IMPORTANT: Keep this secret! It contains your database credentials
DATABASE_URL=postgresql://username:password@host:5432/database?sslmode=require

# -----------------------------------------------------------------------------
# Application Configuration (Auto-configured by deployment script)
# -----------------------------------------------------------------------------

# Node.js environment
# Values: development, production, test
NODE_ENV=production

# Node.js version for Azure
# The deployment script automatically sets this
WEBSITE_NODE_DEFAULT_VERSION=~20

# Enable build during deployment on Azure
# The deployment script automatically sets this
SCM_DO_BUILD_DURING_DEPLOYMENT=true

# -----------------------------------------------------------------------------
# Optional Configuration
# -----------------------------------------------------------------------------

# Application port (Azure handles this automatically)
# PORT=3000

# Session secret for Express sessions
# Generate a random string: openssl rand -base64 32
# SESSION_SECRET=your-secure-random-string-here

# Enable debug logging (for troubleshooting)
# DEBUG=express:*

# -----------------------------------------------------------------------------
# How to Use This File
# -----------------------------------------------------------------------------
#
# Option 1: Local .env file (for testing locally)
# ---------------------------------------------
# 1. Copy this file: cp .env.template .env
# 2. Fill in the values in .env
# 3. The deployment script will read from .env automatically
# 4. Add .env to .gitignore to prevent committing secrets
#
# Option 2: System Environment Variables (recommended for deployment)
# -----------------------------------------------------------------
# Windows (PowerShell):
#   $env:STRIPE_PUBLISHABLE_KEY = "pk_test_..."
#   $env:STRIPE_SECRET_KEY = "sk_test_..."
#   $env:DATABASE_URL = "postgresql://..."
#
# Linux/Mac (Bash):
#   export STRIPE_PUBLISHABLE_KEY="pk_test_..."
#   export STRIPE_SECRET_KEY="sk_test_..."
#   export DATABASE_URL="postgresql://..."
#
# Option 3: Azure Configuration (post-deployment)
# ----------------------------------------------
# Use Azure CLI to set environment variables:
#   az webapp config appsettings set \
#     --name odins-valhalla \
#     --resource-group viking-restaurant-rg \
#     --settings \
#       "STRIPE_PUBLISHABLE_KEY=pk_test_..." \
#       "STRIPE_SECRET_KEY=sk_test_..." \
#       "DATABASE_URL=postgresql://..."
#
# -----------------------------------------------------------------------------
# Getting Your Credentials
# -----------------------------------------------------------------------------
#
# Stripe Keys:
# -----------
# 1. Sign up at https://stripe.com
# 2. Go to Developers → API Keys
# 3. Copy "Publishable key" and "Secret key"
# 4. Use test keys (pk_test_/sk_test_) for development
# 5. Use live keys (pk_live_/sk_live_) for production
#
# Database URL:
# ------------
# Option A: Neon (Recommended - Free tier available)
# 1. Sign up at https://neon.tech
# 2. Create a new project
# 3. Copy the connection string from the dashboard
#
# Option B: Azure Database for PostgreSQL
# 1. Create database:
#    az postgres server create \
#      --resource-group viking-restaurant-rg \
#      --name odins-eye-db \
#      --location eastus \
#      --admin-user dbadmin \
#      --admin-password <YourPassword> \
#      --sku-name B_Gen5_1
# 2. Get connection string:
#    postgresql://dbadmin@odins-eye-db:<password>@odins-eye-db.postgres.database.azure.com:5432/postgres?sslmode=require
#
# Option C: Supabase (Free tier available)
# 1. Sign up at https://supabase.com
# 2. Create a new project
# 3. Go to Settings → Database
# 4. Copy the connection string (Connection pooling → Transaction mode)
#
# Option D: Heroku Postgres (Free tier available)
# 1. Create a Heroku app with Postgres addon
# 2. Get connection string:
#    heroku config:get DATABASE_URL -a your-app-name
#
# -----------------------------------------------------------------------------
# Security Best Practices
# -----------------------------------------------------------------------------
#
# 1. ✅ Never commit .env or credentials to version control
# 2. ✅ Use different credentials for development and production
# 3. ✅ Rotate secrets regularly (every 90 days recommended)
# 4. ✅ Use Azure Key Vault for production secrets (advanced)
# 5. ✅ Enable Azure Managed Identity when possible
# 6. ✅ Use environment-specific Stripe keys (test vs live)
# 7. ✅ Restrict database access by IP when possible
# 8. ✅ Enable database SSL/TLS connections (sslmode=require)
# 9. ✅ Use strong, unique passwords (minimum 16 characters)
# 10. ✅ Monitor access logs and set up alerts
#
# -----------------------------------------------------------------------------
# Troubleshooting
# -----------------------------------------------------------------------------
#
# Issue: "Environment variable not found"
# Solution: Ensure the variable is set before running deployment script
#
# Issue: "Database connection failed"
# Solution: Verify DATABASE_URL format and credentials are correct
#          Test connection: psql "postgresql://..."
#
# Issue: "Stripe integration not working"
# Solution: Verify keys are not expired and match the environment
#          (test keys for development, live keys for production)
#
# Issue: "Variables not updating on Azure"
# Solution: After changing variables, restart the app:
#          az webapp restart --name odins-valhalla --resource-group viking-restaurant-rg
#
# -----------------------------------------------------------------------------
# Need Help?
# -----------------------------------------------------------------------------
#
# Refer to the DEPLOYMENT-GUIDE.md for detailed instructions
# or contact Viking Restaurant Consultants LLC for support.
#
# =============================================================================
