# =============================================================================
# Odin's Eye - Environment Variables Template
# =============================================================================
# Business: Viking Restaurant Consultants LLC
# Application: Odin's Eye (P&L Converter)
# 
# Instructions:
# 1. Copy this file to .env (or set as system environment variables)
# 2. Fill in all required values
# 3. Never commit .env file to version control
# 4. Keep credentials secure and rotate them regularly
# =============================================================================

# -----------------------------------------------------------------------------
# Azure Configuration
# -----------------------------------------------------------------------------

# Azure Subscription ID
# Where to find: Azure Portal → Subscriptions → Overview
# Format: XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
AZURE_SUBSCRIPTION_ID=97d9a3d7-5693-4992-a879-c819818f4e97

# Azure Region for deployment
# Your actual deployment is in West Central US
AZURE_REGION=westcentralus

# Azure Resource Group name
# This will contain all your Azure resources
AZURE_RESOURCE_GROUP=DefaultResourceGroup-EUS

# Azure App Service Plan name
AZURE_APP_SERVICE_PLAN=viking-app-service-plan

# Azure App Service (Web App) name
# Must be globally unique across Azure
# Current actual app name in Azure
AZURE_APP_NAME=Odinsalmanac

# -----------------------------------------------------------------------------
# Stripe Configuration (Required)
# -----------------------------------------------------------------------------

# Stripe Publishable Key (starts with pk_)
# Where to find: Stripe Dashboard → Developers → API Keys
# Test key example: pk_test_51A...
# Live key example: pk_live_51A...
STRIPE_PUBLISHABLE_KEY=pk_test_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# Stripe Secret Key (starts with sk_)
# Where to find: Stripe Dashboard → Developers → API Keys
# ⚠️ IMPORTANT: Keep this secret! Never share or commit to version control
# Test key example: sk_test_51A...
# Live key example: sk_live_51A...
STRIPE_SECRET_KEY=sk_test_XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

# -----------------------------------------------------------------------------
# Database Configuration (Required) - COSMOS DB
# -----------------------------------------------------------------------------

# Azure Cosmos DB Configuration (NoSQL)
# Your actual database setup uses Cosmos DB, not PostgreSQL
# Where to find: Azure Portal → Cosmos DB → odins-almanac-cosmos → Keys
#
# Cosmos DB Endpoint
COSMOS_DB_ENDPOINT=https://odins-almanac-cosmos.documents.azure.com:443/

# Cosmos DB Database Name
COSMOS_DB_DATABASE_NAME=odins-almanac

# Cosmos DB Primary Key
# ⚠️ IMPORTANT: Keep this secret! It contains your database credentials
COSMOS_DB_KEY=your-cosmos-db-primary-key-here

# Alternative: Full connection string format (if needed)
# COSMOS_DB_CONNECTION_STRING=AccountEndpoint=https://odins-almanac-cosmos.documents.azure.com:443/;AccountKey=your-key-here;

# -----------------------------------------------------------------------------
# Application Configuration (Auto-configured by deployment script)
# -----------------------------------------------------------------------------

# Node.js environment
# Values: development, production, test
NODE_ENV=production

# Node.js version for Azure
# The deployment script automatically sets this
WEBSITE_NODE_DEFAULT_VERSION=~20

# Enable build during deployment on Azure
# The deployment script automatically sets this
SCM_DO_BUILD_DURING_DEPLOYMENT=true

# -----------------------------------------------------------------------------
# Optional Configuration
# -----------------------------------------------------------------------------

# Application port (Azure handles this automatically)
# PORT=3000

# Session secret for Express sessions
# Generate a random string: openssl rand -base64 32
# SESSION_SECRET=your-secure-random-string-here

# Enable debug logging (for troubleshooting)
# DEBUG=express:*

# -----------------------------------------------------------------------------
# How to Use This File
# -----------------------------------------------------------------------------
#
# Option 1: Local .env file (for testing locally)
# ---------------------------------------------
# 1. Copy this file: cp .env.template .env
# 2. Fill in the values in .env
# 3. The deployment script will read from .env automatically
# 4. Add .env to .gitignore to prevent committing secrets
#
# Option 2: System Environment Variables (recommended for deployment)
# -----------------------------------------------------------------
# Windows (PowerShell):
#   $env:STRIPE_PUBLISHABLE_KEY = "pk_test_..."
#   $env:STRIPE_SECRET_KEY = "sk_test_..."
#   $env:COSMOS_DB_KEY = "your-cosmos-key..."
#
# Linux/Mac (Bash):
#   export STRIPE_PUBLISHABLE_KEY="pk_test_..."
#   export STRIPE_SECRET_KEY="sk_test_..."
#   export COSMOS_DB_KEY="your-cosmos-key..."
#
# Option 3: Azure Configuration (post-deployment)
# ----------------------------------------------
# Use Azure CLI to set environment variables:
#   az webapp config appsettings set \
#     --name Odinsalmanac \
#     --resource-group DefaultResourceGroup-EUS \
#     --settings \
#       "STRIPE_PUBLISHABLE_KEY=pk_test_..." \
#       "STRIPE_SECRET_KEY=sk_test_..." \
#       "COSMOS_DB_KEY=your-cosmos-key..."
#
# -----------------------------------------------------------------------------
# Getting Your Credentials
# -----------------------------------------------------------------------------
#
# Stripe Keys:
# -----------
# 1. Sign up at https://stripe.com
# 2. Go to Developers → API Keys
# 3. Copy "Publishable key" and "Secret key"
# 4. Use test keys (pk_test_/sk_test_) for development
# 5. Use live keys (pk_live_/sk_live_) for production
#
# Cosmos DB Setup:
# ----------------
# Your app uses Azure Cosmos DB (NoSQL), not PostgreSQL
# 
# To get your Cosmos DB credentials:
# 1. Go to Azure Portal → Cosmos DB → odins-almanac-cosmos
# 2. Click on "Keys" in the left menu
# 3. Copy the "PRIMARY KEY" value
# 4. The endpoint is: https://odins-almanac-cosmos.documents.azure.com:443/
# 5. The database name is: odins-almanac
#
# Alternative Setup Options (if you want to add PostgreSQL):
# 
# Option A: Neon (Free tier available)
# 1. Sign up at https://neon.tech
# 2. Create a new project
# 3. Copy the connection string from the dashboard
#
# Option B: Supabase (Free tier available)
# 1. Sign up at https://supabase.com
# 2. Create a new project
# 3. Go to Settings → Database
# 4. Copy the connection string
#
# -----------------------------------------------------------------------------
# Security Best Practices
# -----------------------------------------------------------------------------
#
# 1. ✅ Never commit .env or credentials to version control
# 2. ✅ Use different credentials for development and production
# 3. ✅ Rotate secrets regularly (every 90 days recommended)
# 4. ✅ Use Azure Key Vault for production secrets (advanced)
# 5. ✅ Enable Azure Managed Identity when possible
# 6. ✅ Use environment-specific Stripe keys (test vs live)
# 7. ✅ Restrict database access by IP when possible
# 8. ✅ Enable database SSL/TLS connections (sslmode=require)
# 9. ✅ Use strong, unique passwords (minimum 16 characters)
# 10. ✅ Monitor access logs and set up alerts
#
# -----------------------------------------------------------------------------
# Troubleshooting
# -----------------------------------------------------------------------------
#
# Issue: "Environment variable not found"
# Solution: Ensure the variable is set before running deployment script
#
# Issue: "Database connection failed"
# Solution: Verify COSMOS_DB_KEY and COSMOS_DB_ENDPOINT are correct
#          Check Azure Portal → Cosmos DB → Keys
#
# Issue: "Stripe integration not working"
# Solution: Verify keys are not expired and match the environment
#          (test keys for development, live keys for production)
#
# Issue: "Variables not updating on Azure"
# Solution: After changing variables, restart the app:
#          az webapp restart --name Odinsalmanac --resource-group DefaultResourceGroup-EUS
#
# -----------------------------------------------------------------------------
# Need Help?
# -----------------------------------------------------------------------------
#
# Refer to the DEPLOYMENT-GUIDE.md for detailed instructions
# or contact Viking Restaurant Consultants LLC for support.
#
# =============================================================================
